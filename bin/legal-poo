#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION < '1.9'
require 'thor'
require 'erb'

Dir.chdir File.expand_path(File.join(File.dirname(__FILE__),'..'))

FORMATS = {
  :md => ['md','mkd','markdown'],
  :txt => ['txt', 'text', 'plaintext'],
}

class LegalPoo < Thor
  
  desc "fdosl FORMAT YOURNAME COPYRIGHT-DATE", "Generate an FDOSL license file."
  def fdosl(format, copyright_holder, copyright_date)
    @copyright_holder = copyright_holder
    @copyright_date = copyright_date
    emit_license format, 'fdosl'
  end
  
  desc "mit FORMAT YOURNAME COPYRIGHT-DATE", "Generate an MIT license file."
  def mit(format, copyright_holder, copyright_date)
    @copyright_holder = copyright_holder
    @copyright_date = copyright_date
    emit_license format, 'mit'
  end
  
  desc "apache2 FORMAT YOURNAME COPYRIGHT-DATE", "Generate an Apache 2.0 license file."
  def apache2(format, copyright_holder, copyright_date)
    @copyright_holder = copyright_holder
    @copyright_date = copyright_date
    if emit_license format, 'apache2'
      STDERR.puts ""
      STDERR.puts smart_wrap(File.read("lib/apache2.caveats"))
    end
  end
  
  desc "3cbsd FORMAT YOURNAME COPYRIGHT-YEAR ORGANIZATION", "Generate a 3-clause BSD license file."
  def bsd3c(format, copyright_holder, copyright_year, organization)
    @copyright_owner = copyright_holder
    @copyright_year = copyright_year
    @copyright_org = organization
    emit_license format, 'bsd3c'
  end
  
  desc "bsd2c FORMAT YOURNAME COPYRIGHT-YEAR", "Generate a 2-clause BSD license file."
  def bsd2c(format, copyright_owner, copyright_year)
    @copyright_owner = copyright_owner
    @copyright_year = copyright_year
    emit_license format, 'bsd2c'
  end
  
  desc "zlib FORMAT YOURNAME COPYRIGHT-YEAR", "Generate a zlib/libpng license file."
  def zlib(format, copyright_owners, copyright_year)
    @copyright_owners = copyright_owners
    @copyright_year = copyright_year
    emit_license format, 'zlib'
  end
  
  desc "cdl FORMAT YOURNAME ORGANIZATION COPYRIGHT-YEAR", "Generate a Chicken Dance license file."
  def cdl(format, copyright_owner, copyright_organization, copyright_year)
    @copyright_owner = copyright_owner
    @copyright_organization = copyright_organization
    @copyright_year = copyright_year
    if emit_license format, 'cdl'
      STDERR.puts ""
      STDERR.puts smart_wrap(File.read('lib/cdl.caveats'))
    end
  end
  
  desc "cdl_dance FORMAT", "Generate a Chicken Dance License dance file."
  def cdl_dance(format)
    if emit_license format, 'cdl-dance'
      STDERR.puts ""
      STDERR.puts smart_wrap(File.read('lib/cdl.caveats'))
    end
  end
  
  private
  
  def emit_license format, file
    fmt = find_format format
    unless fmt == nil
      txt = ERB.new(File.read("lib/#{file}.#{fmt.to_s}.erb")).result(binding)
      txt = smart_wrap txt if fmt == :txt
      print txt
    else
      return false
    end
    true
  end
  
  def find_format format
    FORMATS.each do |fmt, aliases|
      return fmt if aliases.include? format
    end
    STDERR.puts "I don't understand the format #{format}"
    STDERR.puts "\n"
    STDERR.puts "Try one of the following:"
    pretty_print_formats
    return nil
  end
  
  def pretty_print_formats
    FORMATS.each do |fmt, aliases|
      STDERR.puts "  #{fmt.to_s}"
      while !aliases.empty?
        STDERR.puts "    #{aliases.take(5).join(' ')}"
        aliases=aliases.drop 5
      end
    end
  end
  
  def smart_wrap(text, width=80)
    text.split("\n").collect do |line|
      # oh my gosh this is ugly, but the hanging indent is so cool!
      if line.match /^\s*(\*|\d+[\.\)])/
        (word_wrap(line.strip, ' '*line.match(/^(\s*(?:\*|\d+[\.\)])\s?)/)[1].length, width)+"\n").split("\n").collect do |l|
          if l.match /^\s*(\*|\d+[\.\)])/
            l
          else
            (' '*line.match(/^\s*(\*|\d+[\.\)]\s?)/)[1].length)+l
          end
        end * "\n" + "\n"
      elsif line.match /^\s?$/
        "\n"
      else
        word_wrap(line.strip, line.match(/^(\s*)/)[1], width)+"\n"
      end
    end
  end
  
  # stolen from https://github.com/rails/rails/blob/196407c54f0736c275d2ad4e6f8b0ac55360ad95/actionpack/lib/action_view/helpers/text_helper.rb#L217
  def word_wrap(text, prefix='', line_width=80)
    text.split("\n").collect do |line|
      line.length + prefix.length > line_width ? prefix+line.gsub(/(.{1,#{line_width-prefix.length}})(\s+|$)/, "#{prefix}\\1\n").strip : prefix+line
    end * "\n"
  end
  
end

LegalPoo.start